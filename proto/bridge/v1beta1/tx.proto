syntax = "proto3";
package bridge.v1beta1;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";

option go_package                    = "github.com/fury-labs/fury-bridge/x/bridge/types";
option (gogoproto.equal_all)         = true;
option (gogoproto.verbose_equal_all) = true;

// Msg defines the bridge Msg service.
service Msg {
  // BridgeEthereumToFury defines a method for bridging ERC20 tokens from
  // Ethereum to Fury.
  rpc BridgeEthereumToFury(MsgBridgeEthereumToFury) returns (MsgBridgeEthereumToFuryResponse);

  // ConvertCoinToERC20 defines a method for converting sdk.Coin to Fury ERC20.
  rpc ConvertCoinToERC20(MsgConvertCoinToERC20) returns (MsgConvertCoinToERC20Response);

  rpc ConvertERC20ToCoin(MsgConvertERC20ToCoin) returns (MsgConvertERC20ToCoinResponse);
}

// MsgBridgeEthereumToFury defines a ERC20 bridge transfer from Ethereum to Fury.
message MsgBridgeEthereumToFury {
  // Address of the bridge relayer.
  string relayer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // Originating Ethereum ERC20 contract address.
  string ethereum_erc20_address = 2 [(gogoproto.customname) = "EthereumERC20Address"];
  // ERC20 token amount to transfer.
  string amount = 3 [
    (cosmos_proto.scalar)  = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable)   = false
  ];
  // Receiver hex address on Fury.
  string receiver = 4;
  // Unique sequence per bridge event.
  string sequence = 5 [
    (cosmos_proto.scalar)  = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable)   = false
  ];
}

// MsgBridgeEthereumToFuryResponse defines the response value from
// Msg/BridgeEthereumToFury.
message MsgBridgeEthereumToFuryResponse {}

// MsgConvertCoinToERC20 defines a conversion from sdk.Coin to Fury ERC20.
message MsgConvertCoinToERC20 {
  // Fury bech32 address initiating the conversion.
  string initiator = 1;
  // EVM hex address that will receive the converted Fury ERC20 tokens.
  string receiver = 2;
  // Amount is the sdk.Coin amount to convert.
  cosmos.base.v1beta1.Coin amount = 3;
}

// MsgConvertCoinToERC20Response defines the response value from
// Msg/ConvertCoinToERC20.
message MsgConvertCoinToERC20Response {}

// MsgConvertERC20ToCoin defines a conversion from Fury ERC20 to sdk.Coin.
message MsgConvertERC20ToCoin {
  // EVM 0x hex address initiating the conversion.
  string initiator = 1;
  // Fury bech32 address that will receive the converted sdk.Coin.
  string receiver = 2;
  // EVM 0x hex address of the ERC20 contract.
  string fury_erc20_address = 3 [(gogoproto.customname) = "FuryERC20Address"];
  // ERC20 token amount to convert.
  string amount = 4 [
    (cosmos_proto.scalar)  = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable)   = false
  ];
}

// MsgConvertERC20ToCoinResponse defines the response value from
// Msg/MsgConvertERC20ToCoin.
message MsgConvertERC20ToCoinResponse {}

